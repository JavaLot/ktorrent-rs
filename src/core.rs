//! # D-Bus interface proxy for: `org.ktorrent.core`
//!
//! This code was generated by `zbus-xmlgen` `5.1.0` from D-Bus introspection data.
//! Source: `Interface '/core' from service 'org.kde.ktorrent' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
    interface = "org.ktorrent.core",
    default_service = "org.kde.ktorrent",
    default_path = "/core"
)]
pub trait core {
    /// addGroup method
    #[zbus(name = "addGroup")]
    fn add_group(&self, group: &str) -> zbus::Result<bool>;

    /// dataDir method
    #[zbus(name = "dataDir")]
    fn data_dir(&self) -> zbus::Result<String>;

    /// groups method
    #[zbus(name = "groups")]
    fn groups(&self) -> zbus::Result<Vec<String>>;

    /// load method
    #[zbus(name = "load")]
    fn load(&self, url: &str, group: &str) -> zbus::Result<()>;

    /// loadSilently method
    #[zbus(name = "loadSilently")]
    fn load_silently(&self, url: &str, group: &str) -> zbus::Result<()>;

    /// log method
    #[zbus(name = "log")]
    fn log(&self, line: &str) -> zbus::Result<()>;

    /// numTorrentsNotRunning method
    #[zbus(name = "numTorrentsNotRunning")]
    fn num_torrents_not_running(&self) -> zbus::Result<u32>;

    /// numTorrentsRunning method
    #[zbus(name = "numTorrentsRunning")]
    fn num_torrents_running(&self) -> zbus::Result<u32>;

    /// orderQueue method
    #[zbus(name = "orderQueue")]
    fn order_queue(&self) -> zbus::Result<()>;

    /// reindexQueue method
    #[zbus(name = "reindexQueue")]
    fn reindex_queue(&self) -> zbus::Result<()>;

    /// remove method
    #[zbus(name = "remove")]
    fn remove(&self, info_hash: &str, data_to: bool) -> zbus::Result<()>;

    /// removeDelayed method
    #[zbus(name = "removeDelayed")]
    fn remove_delayed(&self, info_hash: &str, data_to: bool) -> zbus::Result<()>;

    /// removeGroup method
    #[zbus(name = "removeGroup")]
    fn remove_group(&self, group: &str) -> zbus::Result<bool>;

    /// setSuspended method
    #[zbus(name = "setSuspended")]
    fn set_suspended(&self, suspend: bool) -> zbus::Result<()>;

    /// start method
    #[zbus(name = "start")]
    fn start(&self, info_hash: &str) -> zbus::Result<()>;

    /// startAll method
    #[zbus(name = "startAll")]
    fn start_all(&self) -> zbus::Result<()>;

    /// stop method
    #[zbus(name = "stop")]
    fn stop(&self, info_hash: &str) -> zbus::Result<()>;

    /// stopAll method
    #[zbus(name = "stopAll")]
    fn stop_all(&self) -> zbus::Result<()>;

    /// suspended method
    #[zbus(name = "suspended")]
    fn suspended(&self) -> zbus::Result<bool>;

    /// torrents method
    #[zbus(name = "torrents")]
    fn torrents(&self) -> zbus::Result<Vec<String>>;

    /// finished signal
    #[zbus(signal, name = "finished")]
    fn finished(&self, tor: &str) -> zbus::Result<()>;

    /// settingsChanged signal
    #[zbus(signal, name = "settingsChanged")]
    fn settings_changed(&self) -> zbus::Result<()>;

    /// suspendStateChanged signal
    #[zbus(signal, name = "suspendStateChanged")]
    fn suspend_state_changed(&self, suspended: bool) -> zbus::Result<()>;

    /// torrentAdded signal
    #[zbus(signal, name = "torrentAdded")]
    fn torrent_added(&self, tor: &str) -> zbus::Result<()>;

    /// torrentRemoved signal
    #[zbus(signal, name = "torrentRemoved")]
    fn torrent_removed(&self, tor: &str) -> zbus::Result<()>;

    /// torrentStoppedByError signal
    #[zbus(signal, name = "torrentStoppedByError")]
    fn torrent_stopped_by_error(&self, tor: &str, msg: &str) -> zbus::Result<()>;
}
