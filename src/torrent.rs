//! # D-Bus interface proxy for: `org.ktorrent.torrent`
//!
//! This code was generated by `zbus-xmlgen` `5.0.1` from D-Bus introspection data.
//! Source: `Interface '/torrent/Torrent' from service 'org.kde.ktorrent' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! Consequently, `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,

use byte_unit::{Byte, UnitType};
use std::fmt::{Display, Formatter};
use termion::{color, style};
use zbus::export::serde::{Deserialize, Serialize};
use zbus::{Connection, Result, proxy};

impl TorrentProxy<'_> {
    pub async fn new_from_path(
        torrent_path: zbus::zvariant::OwnedObjectPath,
        connection: &Connection,
    ) -> Result<TorrentProxy<'_>> {
        TorrentProxy::builder(connection)
            .path(torrent_path)?
            .build()
            .await
    }
}

#[proxy(
    interface = "org.ktorrent.torrent",
    default_path = "/torrent/Torrent",
    default_service = "org.kde.ktorrent"
)]
pub trait Torrent {
    /// addTracker method
    #[zbus(name = "addTracker")]
    fn add_tracker(&self, tracker_url: &str) -> Result<bool>;

    /// addWebSeed method
    #[zbus(name = "addWebSeed")]
    fn add_web_seed(&self, webseed_url: &str) -> Result<bool>;

    /// announce method
    #[zbus(name = "announce")]
    fn announce(&self) -> Result<()>;

    /// bytesDownloaded method
    #[zbus(name = "bytesDownloaded")]
    fn bytes_downloaded(&self) -> Result<u64>;

    /// bytesLeft method
    #[zbus(name = "bytesLeft")]
    fn bytes_left(&self) -> Result<u64>;

    /// bytesLeftToDownload method
    #[zbus(name = "bytesLeftToDownload")]
    fn bytes_left_to_download(&self) -> Result<u64>;

    /// bytesToDownload method
    #[zbus(name = "bytesToDownload")]
    fn bytes_to_download(&self) -> Result<u64>;

    /// bytesUploaded method
    #[zbus(name = "bytesUploaded")]
    fn bytes_uploaded(&self) -> Result<u64>;

    /// changeTracker method
    #[zbus(name = "changeTracker")]
    fn change_tracker(&self, tracker_url: &str) -> Result<()>;

    /// chunkDownloaded method
    #[zbus(name = "chunkDownloaded")]
    fn chunk_downloaded(&self, idx: u32) -> Result<bool>;

    /// chunkSize method
    #[zbus(name = "chunkSize")]
    fn chunk_size(&self) -> Result<u32>;

    /// chunks method
    #[zbus(name = "chunks")]
    fn chunks(&self) -> Result<u32>;

    /// createStream method
    #[zbus(name = "createStream")]
    fn create_stream(&self, file_index: u32) -> Result<bool>;

    /// currentTracker method
    #[zbus(name = "currentTracker")]
    fn current_tracker(&self) -> Result<String>;

    /// dataDir method
    #[zbus(name = "dataDir")]
    fn data_dir(&self) -> Result<String>;

    /// downloadSpeed method
    #[zbus(name = "downloadSpeed")]
    fn download_speed(&self) -> Result<u32>;

    /// filePath method
    #[zbus(name = "filePath")]
    fn file_path(&self, file_index: u32) -> Result<String>;

    /// filePathOnDisk method
    #[zbus(name = "filePathOnDisk")]
    fn file_path_on_disk(&self, file_index: u32) -> Result<String>;

    /// filePercentage method
    #[zbus(name = "filePercentage")]
    fn file_percentage(&self, file_index: u32) -> Result<f64>;

    /// filePriority method
    #[zbus(name = "filePriority")]
    fn file_priority(&self, file_index: u32) -> Result<i32>;

    /// fileSize method
    #[zbus(name = "fileSize")]
    fn file_size(&self, file_index: u32) -> Result<u64>;

    /// firstChunkOfFile method
    #[zbus(name = "firstChunkOfFile")]
    fn first_chunk_of_file(&self, file_index: u32) -> Result<i32>;

    /// infoHash method
    #[zbus(name = "infoHash")]
    fn info_hash(&self) -> Result<String>;

    /// isAllowedToStart method
    #[zbus(name = "isAllowedToStart")]
    fn is_allowed_to_start(&self) -> Result<bool>;

    /// isMultiMediaFile method
    #[zbus(name = "isMultiMediaFile")]
    fn is_multi_media_file(&self, file_index: u32) -> Result<bool>;

    /// isPrivate method
    #[zbus(name = "isPrivate")]
    fn is_private(&self) -> Result<bool>;

    /// lastChunkOfFile method
    #[zbus(name = "lastChunkOfFile")]
    fn last_chunk_of_file(&self, file_index: u32) -> Result<i32>;

    /// leechersConnected method
    #[zbus(name = "leechersConnected")]
    fn leechers_connected(&self) -> Result<u32>;

    /// leechersTotal method
    #[zbus(name = "leechersTotal")]
    fn leechers_total(&self) -> Result<u32>;

    /// maxSeedTime method
    #[zbus(name = "maxSeedTime")]
    fn max_seed_time(&self) -> Result<f64>;

    /// maxShareRatio method
    #[zbus(name = "maxShareRatio")]
    fn max_share_ratio(&self) -> Result<f64>;

    /// name method
    #[zbus(name = "name")]
    fn name(&self) -> Result<String>;

    /// numFiles method
    #[zbus(name = "numFiles")]
    fn num_files(&self) -> Result<u32>;

    /// pathOnDisk method
    #[zbus(name = "pathOnDisk")]
    fn path_on_disk(&self) -> Result<String>;

    /// priority method
    #[zbus(name = "priority")]
    fn priority(&self) -> Result<i32>;

    /// removeStream method
    #[zbus(name = "removeStream")]
    fn remove_stream(&self, file_index: u32) -> Result<bool>;

    /// removeTracker method
    #[zbus(name = "removeTracker")]
    fn remove_tracker(&self, tracker_url: &str) -> Result<bool>;

    /// removeWebSeed method
    #[zbus(name = "removeWebSeed")]
    fn remove_web_seed(&self, webseed_url: &str) -> Result<bool>;

    /// restoreDefaultTrackers method
    #[zbus(name = "restoreDefaultTrackers")]
    fn restore_default_trackers(&self) -> Result<()>;

    /// scrape method
    #[zbus(name = "scrape")]
    fn scrape(&self) -> Result<()>;

    /// seedTime method
    #[zbus(name = "seedTime")]
    fn seed_time(&self) -> Result<f64>;

    /// seedersConnected method
    #[zbus(name = "seedersConnected")]
    fn seeders_connected(&self) -> Result<u32>;

    /// seedersTotal method
    #[zbus(name = "seedersTotal")]
    fn seeders_total(&self) -> Result<u32>;

    /// setAllowedToStart method
    #[zbus(name = "setAllowedToStart")]
    fn set_allowed_to_start(&self, on: bool) -> Result<()>;

    /// setDoNotDownload method
    #[zbus(name = "setDoNotDownload")]
    fn set_do_not_download(&self, file_index: u32, dnd: bool) -> Result<()>;

    /// setFilePriority method
    #[zbus(name = "setFilePriority")]
    fn set_file_priority(&self, file_index: u32, prio: i32) -> Result<()>;

    /// setMaxSeedTime method
    #[zbus(name = "setMaxSeedTime")]
    fn set_max_seed_time(&self, hours: f64) -> Result<()>;

    /// setMaxShareRatio method
    #[zbus(name = "setMaxShareRatio")]
    fn set_max_share_ratio(&self, ratio: f64) -> Result<()>;

    /// setPriority method
    #[zbus(name = "setPriority")]
    fn set_priority(&self, p: i32) -> Result<()>;

    /// setTrackerEnabled method
    #[zbus(name = "setTrackerEnabled")]
    fn set_tracker_enabled(&self, tracker_url: &str, enabled: bool) -> Result<()>;

    /// shareRatio method
    #[zbus(name = "shareRatio")]
    fn share_ratio(&self) -> Result<f64>;

    /// stats method
    #[zbus(name = "stats")]
    fn stats(&self) -> Result<Vec<u8>>;

    /// torDir method
    #[zbus(name = "torDir")]
    fn tor_dir(&self) -> Result<String>;

    /// totalSize method
    #[zbus(name = "totalSize")]
    fn total_size(&self) -> Result<u64>;

    /// trackers method
    #[zbus(name = "trackers")]
    fn trackers(&self) -> Result<Vec<String>>;

    /// uploadSpeed method
    #[zbus(name = "uploadSpeed")]
    fn upload_speed(&self) -> Result<u32>;

    /// webSeeds method
    #[zbus(name = "webSeeds")]
    fn web_seeds(&self) -> Result<Vec<String>>;
}

#[derive(Serialize, Deserialize, PartialEq, Debug)]
pub struct TorrentStats {
    pub status: String,
    pub running: i8,
    pub session_bytes_downloaded: u64,
    pub session_bytes_uploaded: u64,
    pub started: i8,
    pub stopped_by_error: i8,
}

#[derive(Debug)]
pub struct UpDownStats {
    pub uploaded: u64,
    pub downloaded: u64,
}

impl UpDownStats {
    pub fn new() -> UpDownStats {
        UpDownStats {
            uploaded: 0,
            downloaded: 0,
        }
    }

    pub fn from_torrent_stats(stats: &TorrentStats) -> UpDownStats {
        UpDownStats {
            uploaded: stats.session_bytes_uploaded,
            downloaded: stats.session_bytes_downloaded,
        }
    }

    pub fn update(&mut self, stat: &TorrentStats) {
        self.uploaded += stat.session_bytes_uploaded;
        self.downloaded += stat.session_bytes_downloaded;
    }
}

impl Default for UpDownStats {
    fn default() -> UpDownStats {
        UpDownStats::new()
    }
}

impl Display for UpDownStats {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        if self.uploaded > 0 {
            write!(
                f,
                "{}{}тнб {:.3} {}",
                style::Bold,
                color::Fg(color::Green),
                Byte::from_u64(self.uploaded)
                    .get_appropriate_unit(UnitType::Binary),
                style::Reset
            )?;
        }
        if self.downloaded > 0 {
            write!(
                f,
                "{}тнг {:.3} {}",
                color::Fg(color::Red),
                Byte::from_u64(self.downloaded)
                    .get_appropriate_unit(UnitType::Binary),
                style::Reset
            )?;
        }
        write!(f, "")
    }
}
